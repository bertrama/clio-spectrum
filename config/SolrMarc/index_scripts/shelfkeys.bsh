import org.marc4j.marc.*;
import org.solrmarc.tools.Utils;
import com.solrmarc.icu.lang.UCharacter;

/* define the base level indexer so that its methods can be called from the script.
 * note that the SolrIndexer code will set this value before the script methods are called.
 */
org.solrmarc.index.SolrIndexer indexer = null;


// private static Map<Character, Character> alphanumReverseMap = new HashMap<Character, Character>();

private static Map alphanumReverseMap = new HashMap();
{
    alphanumReverseMap.put('0', 'Z');
    alphanumReverseMap.put('1', 'Y');
    alphanumReverseMap.put('2', 'X');
    alphanumReverseMap.put('3', 'W');
    alphanumReverseMap.put('4', 'V');
    alphanumReverseMap.put('5', 'U');
    alphanumReverseMap.put('6', 'T');
    alphanumReverseMap.put('7', 'S');
    alphanumReverseMap.put('8', 'R');
    alphanumReverseMap.put('9', 'Q');
    alphanumReverseMap.put('A', 'P');
    alphanumReverseMap.put('B', 'O');
    alphanumReverseMap.put('C', 'N');
    alphanumReverseMap.put('D', 'M');
    alphanumReverseMap.put('E', 'L');
    alphanumReverseMap.put('F', 'K');
    alphanumReverseMap.put('G', 'J');
    alphanumReverseMap.put('H', 'I');
    alphanumReverseMap.put('I', 'H');
    alphanumReverseMap.put('J', 'G');
    alphanumReverseMap.put('K', 'F');
    alphanumReverseMap.put('L', 'E');
    alphanumReverseMap.put('M', 'D');
    alphanumReverseMap.put('N', 'C');
    alphanumReverseMap.put('O', 'B');
    alphanumReverseMap.put('P', 'A');
    alphanumReverseMap.put('Q', '9');
    alphanumReverseMap.put('R', '8');
    alphanumReverseMap.put('S', '7');
    alphanumReverseMap.put('T', '6');
    alphanumReverseMap.put('U', '5');
    alphanumReverseMap.put('V', '4');
    alphanumReverseMap.put('W', '3');
    alphanumReverseMap.put('X', '2');
    alphanumReverseMap.put('Y', '1');
    alphanumReverseMap.put('Z', '0');
}


/** this character will sort first */
public static char SORT_FIRST_CHAR = Character.MIN_VALUE;
public static StringBuilder reverseDefault = new StringBuilder(75);
{
    for (int i = 0; i < 50; i++) 
// N.B.:  this char is tough to deal with in a variety of contexts.  
// Hopefully diacritics and non-latin won't bite us in the butt.
//          reverseDefault.append(Character.toChars(Character.MAX_CODE_POINT));
        reverseDefault.append(Character.toChars('~'));
}




// Needs to satisfy the following calls from index.properties:
// shelfkey = script(shelfkeys.bsh), getShelfkeys
// reverse_shelfkey = script(shelfkeys.bsh), getReverseShelfkeys

public Set getShelfkeys(Record record)
{
  Set shelfkeysRaw = indexer.getFieldList(record, "991b");
  String recordId = indexer.getFirstFieldVal(record, "001");

  Set shelfkeys = new HashSet();
  for (String shelfkey : shelfkeysRaw)
  {
    if (shelfkey != null && shelfkey.length() > 0)
    {
      shelfkeys.add(shelfkey.toLowerCase() + '+' + recordId);
    }
  }
  return shelfkeys;
}


static Set getReverseShelfkeys(Record record)
{
  Set shelfkeysRaw = indexer.getFieldList(record, "991b");
  String recordId = indexer.getFirstFieldVal(record, "001");

  Set reverseShelfkeys = new HashSet();
  for (String shelfkey : shelfkeysRaw)
  {
    if (shelfkey != null && shelfkey.length() > 0)
    {
      String reverseShelfkey = getReverseShelfkey(shelfkey + '+' + recordId);
      if (reverseShelfkey != null && reverseShelfkey.length() > 0)
        reverseShelfkeys.add(reverseShelfkey.toLowerCase());
    }
  }
  return reverseShelfkeys;
}



public static String getReverseShelfkey(String shelfkey) {
  StringBuilder resultBuf = new StringBuilder(reverseDefault);
  if (shelfkey != null && shelfkey.length() > 0)
    resultBuf.replace(0, shelfkey.length(), reverseAlphanum(shelfkey));
  return resultBuf.toString();
}




/**
 * return the reverse String value, mapping A --> 9, B --> 8, ...
 *   9 --> A and also non-alphanum to sort properly (before or after alphanum)
 */
private static String reverseAlphanum(String orig) {

/*      
    char[] origArray = orig.toCharArray();

    char[] reverse = new char[origArray.length];
    for (int i = 0; i < origArray.length; i++) {
        Character ch = origArray[i];
        if (ch != null) {
            if (Character.isLetterOrDigit(ch))
                reverse[i] = alphanumReverseMap.get(ch);
            else 
                reverse[i] = reverseNonAlphanum(ch);
        }
    }
*/          
    StringBuilder reverse = new StringBuilder();
    for (int ix = 0; ix < orig.length(); ) {
        int codePoint = Character.toUpperCase(orig.codePointAt(ix));
        char[] chs = Character.toChars(codePoint);
        
        if (Character.isLetterOrDigit(codePoint)) {
            if (chs.length == 1) {
                char c = chs[0];
                if (alphanumReverseMap.containsKey(c))
                    reverse.append(alphanumReverseMap.get(c));
                else {
                    // not an ASCII letter or digit
                    
                    // map latin chars with diacritic to char without
                    char foldC;
                    
                    if (UCharacter.UnicodeBlock.of(c) != UCharacter.UnicodeBlock.COMBINING_DIACRITICAL_MARKS &&  
                        UCharacter.UnicodeBlock.of(c) != UCharacter.UnicodeBlock.SPACING_MODIFIER_LETTERS &&
                         (foldC = Utils.foldDiacriticLatinChar(c)) != 0x00)
                        // we mapped a latin char w diacritic to plain ascii 
                        reverse.append(alphanumReverseMap.get(foldC));
                    else
                        // single char, but non-latin, non-digit
                        // ... view it as after Z in regular alphabet, for now
                        reverse.append(SORT_FIRST_CHAR);
                }
            }
            else  {
                // multiple 16 bit character unicode letter
                // ... view it as after Z in regular alphabet, for now
                reverse.append(SORT_FIRST_CHAR);
            }
        }
        else // not a letter or a digit 
            reverse.append(reverseNonAlphanum(chs[0]));

        ix += chs.length;
    }

    return new String(reverse);     
}

/**
 * for non alpha numeric characters, return a character that will sort
 *  first or last, whichever is the opposite of the original character. 
 */
public static char[] reverseNonAlphanum(char ch) {
    // use punctuation before or after alphanum as appropriate
    switch (ch) {
        case '.':
            return Character.toChars('}');
        case '{':
        case '|':
        case '}':
        case '~':
// N.B.:  these are tough to deal with in a variety of contexts.  
// Hopefully diacritics and non-latin won't bite us in the butt.
//              return Character.toChars(Character.MIN_CODE_POINT);
            return Character.toChars(' ');
        default:
//              return Character.toChars(Character.MAX_CODE_POINT);
            return Character.toChars('~');
    }   
}


// Build the single Solr field which combines Call-Num, shelfkey, and reverse-shelfkey
public Set getItemDisplay(Record record)
{
  Set item_displays = new HashSet();

  List call_numbers = record.getVariableFields("991");
  String recordId = indexer.getFirstFieldVal(record, "001");

  for (VariableField call_number : call_numbers)
  {
    String idSuffix = '+' + recordId;

    String display_call_number = call_number.getSubfield('a').getData();
    
    String shelfkey = call_number.getSubfield('b').getData().toLowerCase() + idSuffix;
    
    String reverseShelfkey = getReverseShelfkey(shelfkey).toLowerCase();
    
    String item_display = display_call_number + " | " + shelfkey + " | " + reverseShelfkey;
    
    item_displays.add(item_display);
    
  }

  return item_displays;
}





