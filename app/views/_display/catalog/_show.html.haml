-# DISPLAY/CATALOG/SHOW
/ views/_display/catalog/_show.html.haml

-# ALL item formats, all catalog-based datasources, use this partial to
-# build their single-item item-detail page.

-#.show
-#= render 'show_constraints', :localized_params=>session[:search]

= render :partial => "_formats/clio/catalog_show_toolbar", :locals => { :document => document }

-# .show-document.col-sm-12{:class => ("database_record" if document['source_display'].include? 'database')}
.show-document.col-sm-12{:class => ("database_record" if document.is_database?)}
  .title
    -# - raise
    %h4= document_heading.listify.join("").html_safe

  .row
    .info.col-sm-6.col-xs-6
      %span.coins_wrapper
        / COinS
        %span.Z3988{ :title => catalog_to_openurl_ctx_kev(document).html_safe }

      = render_document_view(document, :template => "catalog_show", :format => "clio")

      -# NEXT-923 - for all formats, for all data-sources, include a stable
      -# "Bookmark As" link to get back to this record.  Hardcode to prod CLIO URL.
      - bookmark_as_url = "http://clio.columbia.edu/catalog/#{document.id}"
      = add_row('Bookmark As', link_to(bookmark_as_url, bookmark_as_url) )

      -# On narrow screen (single-column of div.info, div.holdings), make sure 
      -# div.info expands enough to prevent overlapping by the holdings box
      -# NOTE: to force side-by-side print output, we've added "col-xs-6" to both
      -# info and holdings.  But this also means we never stack on small devices.
      -# Not optimal.
      .clear-both

    .holdings-container.col-sm-6.col-xs-6

      -# Database Notes and Alerts
      -# html_safe true, so that ERC can embed HTML links in their alert msgs
      - if document.get("_active_item_alert_count") && document.get("_active_item_alert_count") > 0
        .well
          -# "alert" alerts
          - document.get("_item_alerts")[:alert].each do | alert |
            - if alert.active?
              .alert_alert
                = "ALERT:  #{alert[:message]}".html_safe
  
          -# "access requirements" alerts
          - document.get("_item_alerts")[:access_requirements].each do | alert |
            - if alert.active?
              = add_row(ItemAlert::ALERT_TYPES['access_requirements'], alert[:message], options = {:html_safe => true})
  
      -# this partial renders, in turn, static html for holdings-online,
      -# holdings-display (Voyager), holdings-google, and holdings-hathi
      = render "_formats/clio/catalog_show_holdings", :document => document

  -# - if current_user.present? and current_user.has_role?('site', 'pilot')
  - unless Rails.env == 'clio_prod'
    - if document['shelfkey']
      -# For multi-call-number items, arbitrarily use first-retrieved as first browse position
      - first_shelfkey = Array( document['shelfkey']).first
      #mini_browse_panel
        .well.Xwell-sm
          .row
            .col-xs-2
              %h4
                Virtual Shelf Browse
            .col-xs-5
              .btn-group
                .btn.btn-default.show_mini_browse{type: 'button'}Show
                .btn.btn-default.hide_mini_browse.disabled{type: 'button'}Hide
                - if session[:browse] && session[:browse]['call_number'] && session[:browse]['shelfkey']
                  = link_to 'Full Screen', browse_shelfkey_full_path(shelfkey: session[:browse]['shelfkey']), class: 'btn btn-default'

            .col-xs-5
              = render "/browse/call_number_toggles", document: document

            -# .col-xs-2
            -#   %strong.pull-right
            -#     -# # = link_to "Full Screen", browse_shelfkey_full_path( first_shelfkey)
            -#     = link_to "Full Screen", '#', class: 'call_number_full_screen', data: {'full-path' => browse_shelfkey_full_path('SHELFKEY')}

          #mini_browse_list.row
            .col-xs-12
              = render "/_formats/clio/catalog_show_nearby", document: document
    
      
  .clear-both
    -# this partial inserts the javascript to fetch book data from Google,
    -# and pass it to update_book_jackets() [defined in holdings.js]
    = render "google_books_check", :documents => document

    - if @active_source == "databases" && can?(:manage, ItemAlert)
      = render "/_formats/database/catalog_manage_alert", :document => document

